<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.punya</groupId>
  <artifactId>springboot-springrest-springdatajpajpa-app</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
	<!-- Java -jar target/springboot_springREST_with_springDataJPA_using_anno_and_anno_based_cfgn-0.0.1-SNAPSHOT.jar -->
  	<!-- <packaging>jar</packaging> -->
  
	<!-- <packaging>war</packaging> -->
	<!-- Java -jar target/springboot_springREST_with_springDataJPA_using_anno_and_anno_based_cfgn-0.0.1-SNAPSHOT.war -->
  
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- <version>1.0.1.RELEASE</version> -->
		<!-- <version>1.0.2.RELEASE</version> -->
		<!-- <version>1.1.1.RELEASE</version> -->
		<!-- <version>1.2.2.RELEASE</version> -->
		<!-- <version>1.2.3.RELEASE</version> -->
		<!-- <version>1.2.5.RELEASE</version> -->
		<!-- <version>1.3.3.RELEASE</version> -->
		<!-- <version>1.4.0.RELEASE</version> -->
		<!-- <version>1.4.1.RELEASE</version> -->
		<!-- <version>1.4.2.RELEASE</version> -->
		<!-- <version>1.4.3.RELEASE</version> -->
		<!-- <version>1.5.2.RELEASE</version> -->
		<!-- <version>1.5.5.RELEASE</version> -->
		<!-- <version>1.5.9.RELEASE</version> -->
		<!-- <version>2.0.0.RELEASE</version> -->
		<!-- <version>2.0.1.RELEASE</version> -->
		<version>2.1.2.RELEASE</version>
		<relativePath />
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		 <failOnMissingWebXml>false</failOnMissingWebXml>
		 <sonar-maven-plugin.version>2.4</sonar-maven-plugin.version>
		<!-- This is required for .war packaging -->
         <start-class>com.springboot.SpringBootSpringRestAppWithSpringDataJPA</start-class>
	</properties>

	<dependencies>
	
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency> -->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- comment this when we are not using in build standalone tomcat server -->
			<!-- <exclusions>
					<exclusion>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-tomcat</artifactId>
					</exclusion>
			</exclusions> -->
		</dependency>
		
		<!-- Note: When we are deploying this war to external server like tomcat or jboss server, add the below dependency -->
		<!-- <dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-tomcat</artifactId>
				<scope>provided</scope>
		</dependency> -->
		
		<!-- If you want to use embedded jetty server instead of embedded standalone tomcat server -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
			<scope>provided</scope>
		</dependency> -->
		
		<!-- To accept response as xml format -->
		<!-- <dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency> -->
		
		<!-- Jackson JSON Processor -->
		<!-- <dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency> -->
		
		<!-- <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-validation</artifactId>
		</dependency> -->
		
		<!-- <dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>2.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>2.2.4</version>
		</dependency> -->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<!-- we can use Hikari CP instead of tomcat-jdbc CP -->
			<exclusions>
				<exclusion>
					<groupId>org.apache.tomcat</groupId>
					<artifactId>tomcat-jdbc</artifactId>
				</exclusion>
				<!-- <exclusion>
					<groupId>com.zaxxer</groupId>
					<artifactId>HikariCP</artifactId>
				</exclusion> -->
			</exclusions>
		</dependency>
		
		<!-- Here we are using Hikari CP, This is default for spring boot 2 -->
		<!-- <dependency>
				<groupId>com.zaxxer</groupId>
				<artifactId>HikariCP</artifactId>
		</dependency> -->
		
		<!-- Common DBCP connection pool -->
       <!--  <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp</artifactId>
        </dependency> -->
		
		<!-- Common DBCP2 connection pool -->
       <!--  <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
        </dependency> -->
		
		<!-- A In memory DB -->
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <scope>runtime</scope>
		</dependency>
		<!-- A In memory DB -->
		<!-- <dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency> -->
		<!-- <dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency> -->
		<!-- <dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc8</artifactId>
			<version>12.2.0</version>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- Required for writing jnit test cases -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- <dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency> -->
		
		<!-- required for securing app through spring security -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency> -->
		
		<!-- Required for cacheing -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency> -->
		
		 <!-- Required for logging with logback dependency started -->
		<!-- <dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>runtime</scope>
		</dependency> -->
		<!-- OR -->
		<!-- <dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.3</version>
		</dependency> -->
		<!-- logback dependency ended -->
		
		<!-- Guava -->
		<!-- <dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>16.0.1</version>
		</dependency> -->
		
		<!-- Java EE -->
		<!-- <dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency> -->
		
		<!-- <dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency> -->
		
		<!-- ################################################################################################################################################################### -->
		<!-- 
		For enabling swagger2 feature :
		step-1, added below 2 dependencies . 
		step-2 Add Swagger2Config.java in config folder.
		step-3 http://localhost:8081/v2/api-docs , http://localhost:8081/swagger-ui.html
		-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
		</dependency>
		<!-- ################################################################################################################################################################### -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		
		<!-- ############################################################################ -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-browser</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		
	</dependencies>

	<build>
		<finalName>springboot_springrest_springdatajpa</finalName>
		 <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.2</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- attached to Maven test phase -->
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.0</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
        </plugins>
	</build>
	
</project>