
	# If we want to start server in a different port then this file is necessary and below cfg is necessary.
	server.port=8082
	
	# If we want to add the below context root, below cfg is necessary.
	#server.contextPath=/springboot-springrest-springjpa_demo
	
	# ###################### banner #####################################################
	#Banner
	#spring.main.banner-mode=off
	#banner.location=classpath:banner.txt
	#banner.image.location=classpath:banner.png
	#banner.image.width=35
	#banner.image.height=17
	
	spring.output.ansi.enabled=ALWAYS
	#spring.output.ansi.enabled=always
	
	# ###################### profile configurations #########################################
	
	# ###################### devtools configurations #######################################
	spring.devtools.restart.enabled=true
	
	# ###################### jdbc configurations #######################################

	# DataSource (H2)
	#spring.datasource.driver-class-name=org.h2.Driver
	spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
	spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
	spring.datasource.username=SYSTEM
	spring.datasource.password=SYSTEM
	# Keep the connection alive if idle for a long time (needed in production)
	spring.datasource.testWhileIdle=true
	spring.datasource.validationQuery=SELECT 1
	
	#spring.datasource.initialization-mode=always
	#spring.datasource.schema=classpath:/schema-xe.sql
	#spring.datasource.data=classpath:/data.sql
	#spring.datasource.continue-on-error=true
	
	#when tomcat-jdbc connection pool configs(Default CP in springboot 1.x)
	#spring.datasource.tomcat.max-wait=20000
	#spring.datasource.tomcat.max-active=5
	#spring.datasource.tomcat.max-idle=2
	#spring.datasource.tomcat.min-idle=15
	
	# when using hikari CP instead of tomcat-jdbc CP.(This is default CP in springboot 2.x)
	spring.datasource.hikari.connection.timeout=12000
	spring.datasource.hikari.maximum-pool-size=5
	#spring.datasource.hikari.poolName=HikariPoolZZZ
	
	#DBCP2 configuration properties
	#spring.datasource.dbcp2.initial-size=7
	#spring.datasource.dbcp2.max-total=20
	#spring.datasource.dbcp2.pool-prepared-statements=true
	
	#spring.h2.console.enabled=true
	#Lunch h2 console:spring.h2.console.path=/h2-console
	#Lunch h2 console: http://localhost:8081/h2-console
	
	# DataSource (ORACLE)
	#spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver
	#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
	#spring.datasource.username=scott
	#spring.datasource.password=tiger
	
	# DataSource (MySql)
	# DataSource settings: set here your own configurations for the database 
	# connection. In this example we have "test" as database name and  "root" as username and password.
	#spring.datasource.driver-class=com.mysql.jdbc.Driver
	#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	#spring.datasource.driverClassName=com.mysql.jdbc.Driver
	#spring.datasource.url = jdbc:mysql://localhost:3306/test?useSSL=false
	#spring.datasource.username = root
	#spring.datasource.password = root
	
	# DataSource (PostgreSQL Server)
	#spring.datasource.driver-class-name=org.postgresql.Driver
	#spring.datasource.url= jdbc:postgresql://localhost:5432/springbootdb
	#spring.datasource.username=postgres
	#spring.datasource.password=postgres@123
	
	# DataSource (MSSQL Server)
	#spring.datasource.driverClassName=net.sourceforge.jtds.jdbc.Driver
	#spring.datasource.url=jdbc:jtds:sqlserver://localhost:1433/simplehr;instance=SQLEXPRESS
	#spring.datasource.username=shoppingcart
	#spring.datasource.password=12345
	
	# ###################### JPA configurations #######################################
	#JPA
	spring.jpa.database-platform=org.hibernate.dialect.OracleDialect
	
	# Show or not log for each sql query
	spring.jpa.show-sql=true
	spring.jpa.properties.hibernate.format_sql=false
	
	# Hibernate ddl auto (create, create-drop, update,validate,none )
	spring.jpa.hibernate.ddl-auto=create-drop
	spring.jpa.generate-ddl=true
	
	# Naming strategy
	#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
	
	# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
	# stripped before adding them to the entity manager)
	
	# The SQL dialect makes Hibernate generate better SQL for the chosen database
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect
	
	spring.jpa.properties.hibernate.id.new_generator_mappings=false
	
	#Turn Statistics on
	spring.jpa.properties.hibernate.generate_statistics=true
	
	# ###################### logging configurations #######################################
	# Available levels are: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
	
	logging.level.root=INFO
	
	#logging spring web
	logging.level.org.springframework.web=ERROR
	
	#Logging spring data
	logging.level.org.springframework.data=ERROR
	
	#spring security
	#logging.level.org.springframework.security=ERROR
	
	#Hibernate
	logging.level.org.hibernate=ERROR
	logging.level.org.hibernate.stat=DEBUG
	logging.level.org.hibernate.type=INFO
	logging.level.org.hibernate.type.descriptor.sql=INFO
	logging.level.org.hibernate.type.descriptor.sql.BasicBinder=INFO
	logging.level.org.hibernate.SQL=DEBUG
	
	#our application log level
	logging.level.com.springboot=DEBUG
	#logging.path=logs
	logging.file=logs/app-test.log
	#logging.file=E:\springboot_springrest_05_jar_with_spring_data_jpa_using_anno_cfgn.log
	logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
